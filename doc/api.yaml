openapi: 3.0.3

info:
  title: WASAPhoto API Specification
  description: |-
      This OpenAPI document describes a set of interfaces to allow a WASAPhoto user 
      to interact with the WASAPhoto backend, WASAPhoto is a new social network that
      allows you to share your best moments with friends! 
  version: "v0.9.0"

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      description: |
        Bearer token for the WASAPhoto API.
      scheme: bearer
      bearerFormat: /^[A-F0-9]{64}$/i

  schemas:
    Username:
      title: Username
      type: object
      description: |- 
        The username of the user, it must begin with an alphabetical character 
        and can be composed of a number of alphanumeric characters and underscores, 
        with a minimum length of 3 and a maximum length of 32.
      properties:
        username:
          type: string
          pattern: ^[a-zA-Z][a-zA-Z0-9_]{2,32}$ # we don't want to accept any whitespace or weird characters.
          example: "Dario_Loi_123"
          minLength: 2
          maxLength: 32
    SHA256hash:
      title: SHA256hash
      type: object
      description: |- 
        A generic SHA256 hash, used throughout the API to identify users, photos and more.
      properties:
        hash:
          type: string
          description: The token of the user
          pattern: ^[a-fA-F0-9]{64}$
          example: 985981bedf5cc6956330a1e4c39526a8839e8a3ec3adf0f2e3eedd59c359a58d
          minLength: 64
          maxLength: 64
      
    Photo:
      title: Photo
      format: binary  
      type: string
      minLength: 0
      maxLength: 32000000 # 32MB
      description: |- 
        A Base64 encoded photo, used both in posts, profile pictures and 
        generally all over the place, this is WASA*Photo* after all.
      pattern: ^[A-Za-z0-9+/=]*$

    UserID:
      title: UserID #this is basically just a `typedef`
      type: object
      description: |- 
        The token that identifies the user, SHA 256. 
      properties:
        token:
          $ref: '#/components/schemas/SHA256hash'

    User:
      title: User
      type: object
      description: |- 
        A user of the WASAPhoto social network, it contains all *public* information of 
        that user necessary for a quick representation, omitting information such as photos
        in order to reduce the size of the structure.
      properties:
        username:
          $ref: '#/components/schemas/Username'
          description: The username of the user
        profile_photo:
          $ref: '#/components/schemas/Photo'
          description: The profile picture of the user

    UserList:
      title: UserList
      type: object
      description: |- 
        A list of users, used to return the list of followers and following of a user.
      properties:
        users:
          type: array
          minItems: 0
          maxItems: 4294967295
          items:
            $ref: '#/components/schemas/UserID'
            description: The ID of a user in the list

    FollowList:
      title: FollowList
      type: object
      description: |- 
        A Userlist bound to a single user, it is used to represent the Followers/Following
        of a user, structurally identical to a BanList, we give it a different name 
        to separate them semantically.
      properties:
        owner:
          allOf:
            - $ref: '#/components/schemas/User'
            - description: The user whose followers/following are being listed
        users:
          $ref : '#/components/schemas/UserList'
          
    BanList:
      title: BanList
      type: object
      description: |- 
        A List of users banned by its owner, structurally identical to a FollowList, we give 
        it a different name to separate them semantically.
      properties:
        owner:
          allOf:  
            - $ref: '#/components/schemas/User'
            - description: The user that *owns* the bans.
        banned_users:
          $ref : '#/components/schemas/UserList'

    LikesList:
      title: LikesList
      type: object
      description: |- 
        A list of users that liked a specific post, together with a refernece to the post 
        itself.
      properties:
        owner:
          allOf:
            - $ref: '#/components/schemas/Photopost'
            - description: The user that *owns* the likes.
        like_users:
          $ref : '#/components/schemas/UserList'

    Comment:
      title: Comment
      type: object
      description: |- 
        A comment on a post, it contains the comment's author, body, date and time of 
        creation.
      properties:
        author:
          $ref: '#/components/schemas/User'
        body:
          type: string
          description: The body of the comment
          example: |-
            I really like this photo, the subtle off-white coloring of the background 
            really makes the color pop!
          minLength: 0
          maxLength: 1024
        creation_time:
          type: string
          format: date-time
          pattern: ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$
          minLength: 20
          maxLength: 20
          description: Date and time when the comment was created
          example: 2020-12-31T23:59:59Z
        parent_post:
          $ref: '#/components/schemas/SHA256hash'
    
    CommentID:
      title: CommentID
      type: object
      description: |- 
        An ID identifying a comment, we use our SHA256 hash.
      properties:
        token:
          $ref: '#/components/schemas/SHA256hash'

    CommentList:
      title: CommentList
      type: object
      description: |- 
        A list of comments on a post, packed together to be put in a PhotoPost.
      properties:
        comments:
          type: array
          description: The list of comments
          minItems: 0
          maxItems: 4294967295
          items:
            $ref: '#/components/schemas/Comment'

    Place:
      title: Place
      type: object
      description: |- 
        A place, it contains a triple of country, state and city, together with 
        a pair of latitude-longitude coordinates.
      properties:
        country:  #We use regex to validate the country, state and city names.
          type: string
          description: Country
          example: Italy
          minLength: 1
          maxLength: 64
          pattern: ^[^\\]{1,64}$
        state:
          type: string
          description: State in the Country
          example: Latium
          pattern: ^[^\\]{1,64}$
          minLength: 1
          maxLength: 64
        city:
          type: string
          description: City in the state
          example: Rome
          minLength: 1
          pattern: ^[^\\]{1,64}$
          maxLength: 64
        coordinates:
          type: object
          description: |-
            The coordinates of the birthplace, expressed in latitude and longitude.
          properties:
            latitude:
              type: number
              description: The latitude of the birthplace
              minimum: -90
              maximum: 90
              example: 42.4242
            longitude:
              type: number
              description: The longitude of the birthplace
              minimum: -180
              maximum: 180
              example: -3.1415 

    Biography:
      title: Biography
      type: object
      description: 
        A Biography of a user, it contains a range of personal info on the user's life 
        such as Birth date, birthplace, current residence, education history, employment 
        history, current employment/education status and more.
      properties:
        short_description:
          type: string
          description: |- 
            A short description of the user, used in the profile page, it is a 
            short summary of the user's life.
          example: |-
            I'm a 20 year old student at Sapienza University of Rome, I like to take 
            photos of kittens and sunsets. 
          pattern: ^[^\\]*?$
          minLength: 0
          maxLength: 65536
        birthdate:
          type: string
          format: date
          description: The user's birthdate
          pattern: ^\d{2}-\d{2}-\d{4}$
          minLength: 10
          maxLength: 10
          example: 13-06-2001
        birthplace:
          allOf:
            - $ref: "#/components/schemas/Place"
            - description: |-
                The user's birthplace.
        residence:
          allOf:
            - $ref: "#/components/schemas/Place"
            - description: |-
                Where the user lives.
        education:
          type: array
          minItems: 0
          maxItems: 256
          description: |-
            The user's education history, a list of places where the user studied.
          items:
              type: object
              properties:
                name:
                  type: string 
                  description: The Instituion's name.
                  pattern: ^.{0,256}$
                  example: Sapienza University of Rome.
                  minLength: 1
                  maxLength: 256
                place:
                  allOf:
                    - $ref: "#/components/schemas/Place"
                    - description: |-
                        A place where the user studied.
                start_date:
                  type: string
                  format: date
                  pattern: ^\d{2}-\d{2}-\d{4}$
                  description: The date when the user started studying
                  example: 13-06-2001
                  minLength: 10
                  maxLength: 10
                end_date:
                  type: string
                  format: date
                  pattern: ^\d{2}-\d{2}-\d{4}$
                  description: The date when the user stopped studying
                  example: 13-06-2018
                  minLength: 10
                  maxLength: 10
        employment:
          type: array
          minItems: 0
          maxItems: 256
          description: |-
            The user's employment history, a list of places where the user worked.
          items:
              type: object
              properties:
                name:
                  type: string 
                  pattern: ^[^\\]{0,256}$
                  description: The company's name.
                  example: Google
                  minLength: 1
                  maxLength: 256
                place:
                  allOf:
                    - $ref: "#/components/schemas/Place"
                    - description: |-
                        A place where the user worked.
                start_date:
                  type: string
                  format: date
                  pattern: ^\d{2}-\d{2}-\d{4}$
                  description: The date when the user started working
                  minLength: 10
                  maxLength: 10
                  example: 13-06-2018
                end_date:
                  type: string
                  format: date
                  pattern: ^\d{2}-\d{2}-\d{4}$
                  minLength: 10
                  maxLength: 10
                  description: The date when the user stopped working
                  example: 13-06-2020
        current_state:
          type: string
          enum:
            - studying
            - working
            - unemployed
          description: |-
            The user's current state, whether they are studying, working or unemployed.
          example: working
        current_place:
          type: object
          description: |-
            The user's current place of employment or education, we do not go through 
            the trouble of validating if it is an actual place of work or study, or 
            whether the student is actually working there.
          properties:
            name:
              type: string 
              description: The Institution/Company's name.
              example: Google
              pattern: ^.{1,256}$
              minLength: 1
              maxLength: 256
            location:
              allOf:
                - description: |-
                    Where the place is located
                - $ref: "#/components/schemas/Place"

        
    Photopost:
      title: Photopost
      type: object
      description: |- 
        A post containing a photo to be displayed in various environments,
        both user profiles and the main feed.
      properties:
        id:
          $ref: '#/components/schemas/SHA256hash'
        author_identifier:
          $ref: '#/components/schemas/UserID'
        photo:
          $ref: '#/components/schemas/Photo'
        comments:
          $ref: '#/components/schemas/CommentList'
        description:
          type: string
          minLength: 0
          maxLength: 1024
          description: Description of the photo
          pattern: ^[^\\]*?$
          example: This photo is super cool!
        created_at:
          type: string
          format: date-time
          description: Date and time when the photo was posted
          example: 2020-12-31T23:59:59Z
          pattern: ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$
          minLength: 20
          maxLength: 20

    Stream:
      title: Stream
      type: object
      description: |- 
        A stream of posts, it contains a list of Photoposts.
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Photopost'
          minItems: 1
          maxItems: 256

    Error: 
      title: Error
      type: object
      description: |- 
        An error message, it contains a code and a message.
      properties:
        code:
          type: integer
          description: The error code
          example: 400
        message:
          type: string
          description: The error message
          example: Bad request
          pattern: ^[^\\]*?$
          minLength: 1
          maxLength: 256

tags:
  - name: users
    description: Operations on users of WASAphoto.
  - name: login 
    description: Operations required for bearer token authentication and session management.
  - name: photos
    description: Operations on photos, the main content of WASA*photo*.
  - name: followers
    description: Operations about followers, interactions between users.
  - name: biography
    description: Operations about biographies, additional info on user's profiles.
  - name: stream
    description: Operations about the stream, the main feed of WASAphoto.
  - name: bans
    description: Operations about bans, for user privacy.

paths:
    
  /users/{user_name}/profile:
    parameters:
    - name: user_name
      in: path
      description: The username of the user whose profile is being requested
      required: true
      schema:
        $ref: '#/components/schemas/Username'
    get:
      operationId: getUserProfile
      tags:
        - "users"
      summary: Get a user's profile
      description: |-
        Get a user's profile, including their username and the list of photos they have posted.

      responses:
        '200':
          description: |-
            The user's profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    $ref: '#/components/schemas/Username'
                  photos:
                    type: array
                    minItems: 0
                    maxItems: 65536
                    items:
                      $ref: '#/components/schemas/Photopost'
        '404':
          description: |-
            The user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        
    patch:
      operationId: setMyUserName
      tags:
        - "users"
        - "login"
      summary: |-
        Changes the username of an existing user.
      description: |-
        Allows an user to update its username after having already obtained an 
        identifier, this prompts an update of the identifier in order to keep the Bearer
        authentication system in a consistent state, since the identifier depends on 
        the user's name.

        Returns the new identifier in the response body so that the user can continue 
        using the application seamlessly.
      parameters:
        - name: identifier
          in: header
          description: |- 
            The identifier of the user that is requesting the update, used for 
            authentication purposes.
          required: true
          schema:
            $ref: '#/components/schemas/UserID'
      security:
        - bearerAuth: []
      requestBody:
        description: |-
          The new username of the user, **must** be different from the previous one.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Username'
      responses:
        '200':
          description: |-
            The user's username has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserID'
        '400':
          description: |-
            The username is ill-formed, it must begin with an alphabetical character,
            must only contain alphanumeric characters and underscores and be of a length
            inbetween 3 and 32.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: |-
            The identifier is not valid, it is either ill-formed or does not belong to the
            user that is requesting the update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: |-
            The username is already taken/is identical to the previous
          content:  
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |-
            The user that is requesting the update does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{user_name}/profile/photos:
    post:
      operationId: uploadPhoto
      summary: Post a photo
      tags:
        - "photos"
      description: |-
        Post a photo to the user's profile
      parameters:
        - name: user_name
          in: path
          description: The username of the user whose profile is being requested
          required: true
          schema:
            $ref: '#/components/schemas/Username'

        - name: identifier
          in: header
          description: The user's identifier
          required: true
          schema:
            $ref: '#/components/schemas/UserID'
        
      security:
        - bearerAuth: []
      requestBody:
        description: |-
          The photo to post
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photo:
                  $ref: '#/components/schemas/Photo'
                description:
                  type: string
                  description: Description of the photo
                  example: This photo is super cool!
                  pattern: ^[^\\]{0,256}$
                  minLength: 0
                  maxLength: 1024
      responses:
        '201':
          description: |-
            The photo has been posted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SHA256hash'
                  - description: |-
                      The hash of the photo, used for identification.
        '400':
          description: |-
            The photo is not valid, it must be a valid base64 encoded image.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |-
            The user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      operationId: getUserPhotos
      summary: Get a user's photos
      tags:
        - "photos"
      description: |-
        Get a user's photos, including their description and the date they were posted,
        useful to populate the feed of their profile.
      parameters:
        - name: user_name
          in: path
          description: The username of the user whose photos are being requested
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      responses:
        '200':
          description: |-
            The user's photos
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 65536
                items:
                  $ref: '#/components/schemas/Photopost'
        '404':
          description: |-
            The user does not 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{user_name}/profile/photos/{photo_id}:
    get:
      operationId: getPhoto
      summary: Get a photo
      description: |-
        Get an individual photo from the user's profile, useful to populate the feed of other 
        users by picking photos recently posted by other users, also useful to manage 
        the comment section and like counter of a photo.
      tags:
        - "photos"
      parameters:
        - name: user_name
          in: path
          description: The user's name
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - name: photo_id
          in: path
          description: The photo's id
          required: true
          schema:
            $ref: '#/components/schemas/SHA256hash'
      responses:
        '200':
          description: |-
            The photo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photopost'
        '404':
          description: |-
            Either the requested user of photo id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deletePhoto
      summary: Delete a photo
      description: |-
        Lets the user delete a photo from their profile, the user must authenticate in order 
        to go ahead.
      tags:
        - "photos"
      parameters:
        - name: user_name
          in: path
          description: The user's name
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - name: photo_id
          in: path
          description: The photo's id
          required: true
          schema:
            $ref: '#/components/schemas/SHA256hash'
        - name: identifier
          in: header
          description: The user's identifier
          required: true
          schema:
            $ref: '#/components/schemas/UserID'
      security:
        - bearerAuth: []
      responses:
        '204':
          description: |-
            The photo has been deleted
        '404':
          description: |-
            Either the requested user of photo id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{user_name}/profile/photos/{photo_id}/likes:
    get:
      operationId: getPhotoLikes
      summary: Get a photo's likes
      description: |-
        Get the list of users that liked a photo, useful to show a like counter and more 
        in depth-information about the likers themselves.
      tags:
        - "photos"
      parameters:
        - name: user_name
          in: path
          description: The user's name
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - name: photo_id
          in: path
          description: The photo's id
          required: true
          schema:
            $ref: '#/components/schemas/SHA256hash'
      responses:
        '200':
          description: |-
            The list of users that liked the photo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikesList'
        '404':
          description: |-
            Either the requested user or photo does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      operationId: likePhoto
      summary: Like a photo
      description: |-
        Lets the user like a photo, the user must authenticate in order to go ahead.
      tags:
        - "photos"
      parameters:
        - name: user_name
          in: path
          description: The user's name
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - name: photo_id
          in: path
          description: The photo's id
          required: true
          schema:
            $ref: '#/components/schemas/SHA256hash'
        - name: identifier
          in: header
          description: The user's identifier
          required: true
          schema:
            $ref: '#/components/schemas/UserID'
      security:
        - bearerAuth: []
      responses:
        '204':
          description: |-
            The photo has been liked
        '404':
          description: |-
            Either the requested user or photo does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{user_name}/profile/photos/{photo_id}/likes/{liker_id}:
    delete:
      operationId: unlikePhoto
      summary: Unlike a photo
      description: |-
        Lets the user unlike a photo, the user must authenticate in order to go ahead.
      tags:
        - "photos"
      parameters:
        - name: user_name
          in: path
          description: The user's name
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - name: photo_id
          in: path
          description: The photo's id
          required: true
          schema:
            $ref: '#/components/schemas/SHA256hash'
        - name: liker_id
          in: path
          description: The user's id
          required: true
          schema:
            $ref: '#/components/schemas/UserID'
        - name: identifier
          in: header
          description: The user's identifier
          required: true
          schema:
            $ref: '#/components/schemas/UserID'
      security:
        - bearerAuth: []
      responses:
        '204':
          description: |-
            The photo has been unliked
        '404':
          description: |-
            Either the requested user or photo does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: |-
            The user has not liked the photo yet, so it cannot be unliked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{user_name}/profile/photos/{photo_id}/comments:
    get:
      operationId: getPhotoComments
      summary: Get a photo's comments
      description: |-
        Get the list of comments of a photo, useful to show a comment counter and more 
        in depth-information about the commenters themselves.
      tags:
        - "photos"
      parameters:
        - name: user_name
          in: path
          description: The user's name
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - name: photo_id
          in: path
          description: The photo's id
          required: true
          schema:
            $ref: '#/components/schemas/SHA256hash'
      responses:
        '200':
          description: |-
            The list of comments of the photo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentList'
        '404':
          description: |-
            Either the requested user or photo does not exist.
    
    post:
      operationId: commentPhoto
      summary: Comment a photo.
      description: |-
        Lets the user comment one of `user_name`'s photos, authentication is required in order 
        to perform the comment, the user might post multiple comments, even identical ones
        (but that would be annoying!).
      security:
        - bearerAuth: []
      
      tags: 
        - "photos"
      parameters:
        - name: user_name
          in: path
          description: The photo owner's username.
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - name: photo_id
          in: path
          description: The photo's ID.
          required: true
          schema:
            $ref: '#/components/schemas/SHA256hash'
        - name: identifier
          in: header
          description: The commenter's Identifier (for authentication).
          required: true
          schema:
            $ref: '#/components/schemas/UserID'
      requestBody:
        description: The comment to be posted on the photo.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: |-
            The comment has been posted.
        '400':
          description: |-
            The request is ill-formed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |-
            Either the requested user or photo does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{user_name}/profile/photos/{photo_id}/comments/{comment_id}:

    delete:
      operationId: deleteComment
      summary: Delete a comment.
      tags:
        - "photos"
      description: |-
        Lets the owner of a photo delete one of the comments on it, the comment gets 
        completely erased from the post and even the commenter cannot see it anymore, 
        naturally, it requires proper authentication from the owner.
      security:
        - bearerAuth: []
      parameters:
        - name: user_name
          in: path
          description: The photo owner's username.
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - name: photo_id
          in: path
          description: The photo's ID.
          required: true
          schema:
            $ref: '#/components/schemas/SHA256hash'
        - name: comment_id
          in: path
          description: The comment's ID.
          required: true
          schema:
            $ref: '#/components/schemas/CommentID'
        - name: identifier
          in: header
          description: The commenter's Identifier (for authentication).
          required: true
          schema:
            $ref: '#/components/schemas/UserID'
      responses:
        '200':
          description: |-
            The comment has been deleted.
        '400':
          description: |-
            The request is ill-formed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |-
            Either the requested user, photo or comment does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /users/{user_name}/following:
    get:
      operationId: getFollowing
      summary: Get the list of users a user is following
      description: |-
        Get the list of users a user is following
      parameters:
        - name: user_name
          in: path
          description: The user's name
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      tags:
        - "followers"
      responses:
        '200':
          description: |-
            The list of users the user is following
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowList'
        '404':
          description: |-
            The user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: followUser
      summary: Follow a user
      description: |-
        Follow a user
      tags:
        - "followers"
      parameters:
        - name: user_name
          in: path
          description: The user's name, used to identify this resource.
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - name: identifier
          in: header
          description: The user's identifier, used for authentication.
          required: true
          schema:
            $ref: '#/components/schemas/UserID'
      requestBody:
        description: |-
          The user to follow
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Username'
      security:
        - bearerAuth: []
      responses:
        '201':
          description: |-
            The user has been followed
        '400':
          description: |-
            The follow request is ill-formed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |-
            The user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /users/{user_name}/following/{followed_name}:

    delete:
      operationId: unfollowUser
      summary: Unfollow a user
      description: |-
        Unfollow a user that the user has been following, requires 
        proper authentication from the user.
      tags:
        - "followers"
      parameters:
        - name: user_name
          in: path
          description: The user's name
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - name: followed_name
          in: path
          description: The name of the user to unfollow
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - name: identifier
          in: header
          description: The user's identifier, used for authentication purposes.
          required: true
          schema:
            $ref: '#/components/schemas/UserID'
      security:
        - bearerAuth: []
      responses:
        '204':
          description: |-
            The user has been unfollowed.
        '400':
          description: |-
            The unfollow request is ill-formed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |-
            The user identified by this name does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: |-
            The user is not being followed by the user specified in the body of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /users/{user_name}/biography:
    get:
      operationId: getBiography
      summary: Gets the biography of a user
      description: |- 
        Retrieves the biography of `user_name`, containing a short description written by
        him, together with some personal information about his life, such as his place 
        of birth, date of birth, current location, a list of institutions he attended 
        for his personal education and a list of jobs he attended up until now.

        The biography, being something very personal, is only accessible by the user's
        followers, therefore, the method *requires* authentication in the form of 
        an identifier, which should match the identifier of one of his followers.
      tags:
        - "biography"
      security:
        - bearerAuth: []
      parameters:
        - name: user_name
          description: The name of the biography's owner.
          required: true
          in: path
          schema:
            $ref: "#/components/schemas/Username"
        - name: requester_ID
          description: The identifier of the request's issuer.
          required: true
          in: header
          schema:
            $ref: "#/components/schemas/UserID"
      responses:
        '200':
          description: |-
            The user's biography has been retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Biography"
        '404':
          description: |-
            The requested user does not exist.
        '401':  
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID).
    put:
      operationId: updateBiography
      summary: Updates the biography of a user
      description: |- 
        Updates the biography of `user_name`, the user must be authenticated by 
        providing his ID.
      tags:
        - "biography"
      security:
        - bearerAuth: []
      parameters:
        - name: user_name
          description: The name of the biography's owner.
          required: true
          in: path
          schema:
            $ref: "#/components/schemas/Username"
        - name: requester_ID
          description: The owner's identifier.
          required: true
          in: header
          schema:
            $ref: "#/components/schemas/UserID"
      requestBody:
        description: |-
          The new biography.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Biography"
      responses:
        '200':
          description: |-
            The user's biography has been updated.
        '400':
          description: |-
            The request is ill-formed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':  
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |-
            The requested user does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{user_name}/stream:
    get:
      operationId: getMyStream
      summary: Gets the stream of a user
      description: |-
        Retrieves the stream of `user_name`, containing a list of the most recent
        posts of the user and his followers.

        The stream is the *heart* of WasaPhoto, it allows a user to see the experiences 
        that his friends are having.

        The stream is therefore something personal that is only accessible through 
        authentication.
      tags:
        - "stream"
        - "users"
      security:
        - bearerAuth: []
      parameters:
        - name: user_name
          description: The name of the stream's owner.
          required: true
          in: path
          schema:
            $ref: "#/components/schemas/Username"
        - name: requester_ID
          description: The identifier of the request's issuer.
          required: true
          in: header
          schema:
            $ref: "#/components/schemas/UserID"
        - name: upto
          description: The maximum number of posts to retrieve.
          required: false
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: |-
            The user's stream has been retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream"
        '404':
          description: |-
            The requested user does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':  
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /users/{user_name}/followers:
    get:
      operationId: getFollowers
      summary: Get the list of users following a user
      description: |-
        Get the list of users following a user
      tags:
        - "followers"
      parameters:
        - name: user_name
          in: path
          description: The user's id
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      responses:
        '200':
          description: |-
            The list of users following the user, the user's name is also 
            aggregated in the list for completeness.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowList'
        '404':
          description: |-
            The user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{user_name}/followers/{follower_name}: 
        delete:
          operationId: removeFollower
          summary: Remove a follower
          description: |-
            Removes a user from the followers list, useful to  
            enforce the privacy of the user's profile without 
            resorting to a hard ban/block.
          tags:
            - "followers"
          parameters:
            - name: identifier
              in: header
              description: The user's id
              required: true
              schema:
                $ref: '#/components/schemas/UserID'
            - name: user_name
              in: path
              description: The user's username
              required: true
              schema:
                $ref: '#/components/schemas/Username'
            - name: follower_name
              in: path
              description: The follower's username
              required: true
              schema:
                $ref: '#/components/schemas/Username'
          security:
            - bearerAuth: []
          responses:
            '204':
              description: |-
                The user has been unfollowed
            '400':
              description: |-
                The user to unfollow is not valid
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Error'
            '404':
              description: |-
                The user does not exist
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Error'
            '409':
              description: |-
                The user is not being followed
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Error'

  /users/{user_name}/bans:
    get:
      operationId: getBans
      summary: Get the list of users banned by a user
      description: |-
        Get the list of all users banned by a user.
      tags:
        - "bans"
      parameters:
        - name: user_name
          in: path
          description: The user's name
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      responses:
        '200':
          description: |-
            The list of users banned by the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BanList'
        '404':
          description: |-
            The requested user does not exist.
    put:
      operationId: banUser
      summary: Ban a user
      description: |-
        Ban a user
      tags:
        - "bans"
      parameters:
        - name: user_name
          in: path
          description: The user's name
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - name: identifier
          in: header
          description: The user's identifier, used for authentication purposes.
          required: true
          schema:
            $ref: '#/components/schemas/UserID'
      requestBody:
        description: |-
          The user to ban
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Username'
      security:
        - bearerAuth: []
      responses:
        '201':
          description: |-
            The user has been banned
        '400':
          description: |-
            The ban request is ill-formed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |-
            The user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        
  /users/{user_name}/bans/{banned_name}:
    delete:
      operationId: unbanUser
      summary: Unban a user
      description: |-
        Unban a user
      tags:
        - "bans"
      parameters:
        - name: user_name
          in: path
          description: The user's name
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - name: banned_name
          in: path
          description: The banned user's name
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - name: identifier
          in: header
          description: The user's identifier, used for authentication purposes.
          required: true
          schema:
            $ref: '#/components/schemas/UserID'
      security:
        - bearerAuth: []
      responses:
        '204':
          description: |-
            The user has been unbanned
        '400':
          description: |-
            The unban request is ill-formed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |-
            The user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /session:
    put:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.

        The usernames *must* be unique, but by tying user login and registration together,
        we are effectively removing the possibility of a duplicate username.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Username'
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserID'
        '400':
          description: |-
            Login request is ill-formed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
