openapi: 3.0.3

info:
  title: WASAPhoto API Specification
  description: |-
    This OpenAPI document describes a set of interfaces to allow a WASAPhoto user 
    to interact with the WASAPhoto backend, WASAPhoto is a new social network that
    allows you to share your best moments with friends!
  version: "v1.0.0"

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      description: |
        Bearer token for the WASAPhoto API.
      scheme: bearer
      bearerFormat: /^[A-F0-9]{64}$/i

  schemas:
    Username:
      title: Username
      type: object
      description: |-
        The username of the user, it must begin with an alphabetical character 
        and can be composed of a number of alphanumeric characters and underscores, 
        with a minimum length of 3 and a maximum length of 32.
      properties:
        username-string:
          type: string
          description: The username of the user
          pattern: ^[a-zA-Z][a-zA-Z0-9_]{2,32}$ # we don't want to accept any whitespace or weird characters.
          example: "Dario_Loi_123"
          minLength: 2
          maxLength: 32

    SHA256hash:
      title: SHA256hash
      type: object
      description: |-
        A generic SHA256 hash, used throughout the API to identify users, photos and more.
      properties:
        hash:
          type: string
          description: A unique identifier, in this case a SHA256 hash.
          pattern: ^[a-fA-F0-9]{64}$
          example: 985981bedf5cc6956330a1e4c39526a8839e8a3ec3adf0f2e3eedd59c359a58d
          minLength: 64
          maxLength: 64

    Photo:
      title: Photo
      format: binary
      type: string
      minLength: 0
      maxLength: 32000000 # 32MB
      description: |-
        A Base64 encoded photo, used generally all over the place, this is WASA*Photo* after all.
      pattern: ^[A-Za-z0-9+/=]*$

    UserID:
      title: UserID #this is basically just a `typedef`
      type: object
      description: |-
        The token that identifies the user, SHA 256.
      properties:
        token:
          $ref: "#/components/schemas/SHA256hash"

    UserList:
      title: UserList
      type: object
      description: |-
        A list of users, used to return the list of followers and following of a user.
      properties:
        users:
          type: array
          description: The list of users
          minItems: 0
          maxItems: 4294967295
          items:
            $ref: "#/components/schemas/Username"

    FollowList:
      title: FollowList
      type: object
      description: |-
        A Userlist bound to a single user, it is used to represent the Followers/Following
        of a user, structurally identical to a BanList, we give it a different name 
        to separate them semantically.
      properties:
        owner:
          allOf:
            - $ref: "#/components/schemas/Username"
            - description: The user whose followers/following are being listed
        follow-list:
          $ref: "#/components/schemas/UserList"

    Comment:
      title: Comment
      type: object
      description: |-
        A comment on a post, it contains the comment's author, body, date and time of 
        creation.
      properties:
        comment_id:
          $ref: "#/components/schemas/SHA256hash"
        author:
          $ref: "#/components/schemas/Username"
        body:
          type: string
          description: The body of the comment
          example: |-
            I really like this photo, the subtle off-white coloring of the background 
            really makes the color pop!
          pattern: ^[^\\]{1,1024}$
          minLength: 0
          maxLength: 1024
        creation_time:
          type: string
          format: date-time
          pattern: ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$
          minLength: 20
          maxLength: 20
          description: Date and time when the comment was created
          example: 2020-12-31T23:59:59Z
        parent_post:
          $ref: "#/components/schemas/SHA256hash"

    CommentList:
      title: CommentList
      type: object
      description: |-
        A list of comments on a post, packed together to be put in a PhotoPost.
      properties:
        comments:
          type: array
          description: The list of comments
          minItems: 0
          maxItems: 4294967295
          items:
            $ref: "#/components/schemas/Comment"

    Photopost:
      title: Photopost
      type: object
      description: |-
        A post containing a photo to be displayed in various environments,
        both user profiles and the main feed.
      properties:
        photo_id:
          $ref: "#/components/schemas/SHA256hash"
        author_name:
          $ref: "#/components/schemas/Username"
        description:
          type: string
          minLength: 0
          maxLength: 1024
          description: Description of the photo
          pattern: ^[^\\]*?$
          example: This photo is super cool!
        created_at:
          type: string
          format: date-time
          description: Date and time when the photo was posted
          example: 2020-12-31T23:59:59Z
          pattern: ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$
          minLength: 20
          maxLength: 20

    Stream:
      title: Stream
      type: object
      description: |-
        A stream of posts, it contains a list of Photoposts.
      properties:
        posts:
          type: array
          description: A list of Photoposts
          items:
            $ref: "#/components/schemas/Photopost"
          minItems: 1
          maxItems: 256

    Error:
      title: Error
      type: object
      description: |-
        An error message, it contains a code and a message.
      properties:
        code:
          type: integer
          description: The error code
          example: 400
        message:
          type: string
          description: The error message
          example: Bad request
          pattern: ^[^\\]*?$
          minLength: 1
          maxLength: 256

tags:
  - name: users
    description: Operations on users of WASAphoto.
  - name: login
    description: Operations required for bearer token authentication and session management.
  - name: photos
    description: Operations on photos, the main content of WASA*photo*.
  - name: followers
    description: Operations about followers, interactions between users.
  - name: stream
    description: Operations about the stream, the main feed of WASAphoto.
  - name: bans
    description: Operations about bans, for user privacy.

paths:
  /users:
    parameters:
      - name: user_name
        in: header
        description: The user's name.
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: search_term
        in: query
        description: The search term.
        required: true
        schema:
          $ref: "#/components/schemas/Username"
    get:
      operationId: searchUsers
      tags:
        - "users"
      summary: Search for users
      description: |-
        Search for users by their name.
      responses:
        "200":
          description: |-
            The list of users that match the search term.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
        "401":
          description: |-
            The searcher_id is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: |-
            Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{user_name}/profile:
    parameters:
      - name: user_name
        in: path
        description: The username of the user that is requesting the update.
        required: true
        schema:
          $ref: "#/components/schemas/Username"

    put:
      operationId: setMyUserName
      tags:
        - "users"
        - "login"
      summary: |-
        Changes the username of an existing user.
      description: |-
        Allows an user to update its username after having already obtained an 
        identifier, this prompts an update of the identifier in order to keep the Bearer
        authentication system in a consistent state, since the identifier depends on 
        the user's name.

        Returns the new identifier in the response body so that the user can continue 
        using the application seamlessly.
      security:
        - bearerAuth: []
      requestBody:
        description: |-
          The new username of the user, **must** be different from the previous one.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Username"
      responses:
        "200":
          description: |-
            The user's username has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserID"
        "400":
          description: |-
            The username is ill-formed, it must begin with an alphabetical character,
            must only contain alphanumeric characters and underscores and be of a length
            inbetween 3 and 32.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: |-
            The identifier is not valid, it is either ill-formed or does not belong to the
            user that is requesting the update.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: |-
            The user that is requesting the update does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{user_name}/profile/photos:
    parameters:
      - name: user_name
        in: path
        description: The username of the user whose photos are being requested
        required: true
        schema:
          $ref: "#/components/schemas/Username"
    get:
      operationId: getUserProfile
      summary: Get a user's profile photos
      tags:
        - "photos"
      description: |-
        Get a user's photos, including their description and the date they were posted,
        useful to populate the feed of their profile.

      responses:
        "200":
          description: |-
            The user's photos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream"
        "404":
          description: |-
            The user does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: |-
            Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{user_name}/profile/photos/{photo_id}:
    parameters:
      - name: user_name
        in: path
        description: The user's name
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: photo_id
        in: path
        description: The photo's id
        required: true
        schema:
          $ref: "#/components/schemas/SHA256hash"

    delete:
      operationId: deletePhoto
      summary: Delete a photo
      description: |-
        Lets the user delete a photo from their profile, the user must authenticate in order 
        to go ahead.
      tags:
        - "photos"
      security:
        - bearerAuth: []
      responses:
        "204":
          description: |-
            The photo has been correctly deleted.
        "404":
          description: |-
            Either the requested user of photo id does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      operationId: uploadPhoto
      summary: Post a photo
      tags:
        - "photos"
      description: |-
        Post a photo to the user's profile
      security:
        - bearerAuth: []
      requestBody:
        description: |-
          The photo to post
        required: true
        content:
          application/json:
            schema:
              type: object
              description: |-
                The photo to post, it must be a valid base64 encoded image.
              properties:
                photo:
                  $ref: "#/components/schemas/Photo"
                description:
                  type: string
                  description: Description of the photo
                  example: This photo is super cool!
                  pattern: ^[^\\]{0,256}$
                  minLength: 0
                  maxLength: 1024
      responses:
        "201":
          description: |-
            The photo has been posted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SHA256hash"
                  - description: |-
                      The hash of the photo, used for identification.
        "400":
          description: |-
            The photo is not valid, it must be a valid base64 encoded image.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: |-
            The user does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{user_name}/profile/photos/{photo_id}/likes:
    parameters:
      - name: user_name
        in: path
        description: The user's name
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: photo_id
        in: path
        description: The photo's id
        required: true
        schema:
          $ref: "#/components/schemas/SHA256hash"
    get:
      operationId: getPhotoLikes
      summary: Get a photo's likes
      description: |-
        Get the list of users that liked a photo, useful to show a like counter and more 
        in depth-information about the likers themselves.
      tags:
        - "photos"
      responses:
        "200":
          description: |-
            The list of users that liked the photo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
        "404":
          description: |-
            Either the requested user or photo does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: |-
            Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: |-
            Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{user_name}/profile/photos/{photo_id}/likes/{liker_id}:
    parameters:
      - name: user_name
        in: path
        description: The user's name
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: photo_id
        in: path
        description: The photo's id
        required: true
        schema:
          $ref: "#/components/schemas/SHA256hash"
      - name: liker_id
        in: path
        description: The user's id
        required: true
        schema:
          $ref: "#/components/schemas/UserID"
    delete:
      operationId: unlikePhoto
      summary: Unlike a photo
      description: |-
        Lets the user unlike a photo, the user must authenticate in order to go ahead.
      tags:
        - "photos"
      security:
        - bearerAuth: []
      responses:
        "204":
          description: |-
            The photo has been unliked
        "404":
          description: |-
            Either the requested user or photo does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: |-
            The user has not liked the photo yet, so it cannot be unliked.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: likePhoto
      summary: Like a photo
      description: |-
        Lets the user like a photo, the user must authenticate in order to go ahead.
      tags:
        - "photos"
      security:
        - bearerAuth: []
      responses:
        "204":
          description: |-
            The photo has been liked

        "404":
          description: |-
            Either the requested user or photo does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{user_name}/profile/photos/{photo_id}/comments:
    parameters:
      - name: user_name
        in: path
        description: The user's name
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: photo_id
        in: path
        description: The photo's id
        required: true
        schema:
          $ref: "#/components/schemas/SHA256hash"
    get:
      operationId: getPhotoComments
      summary: Get a photo's comments
      description: |-
        Get the list of comments of a photo, useful to show a comment counter and more 
        in depth-information about the commenters themselves.
      tags:
        - "photos"
      responses:
        "200":
          description: |-
            The list of comments of the photo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentList"
        "404":
          description: |-
            Either the requested user or photo does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: |-
            Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: |-
            Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{user_name}/profile/photos/{photo_id}/comments/{comment_id}:
    parameters:
      - name: user_name
        in: path
        description: The photo owner's username.
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: photo_id
        in: path
        description: The photo's ID.
        required: true
        schema:
          $ref: "#/components/schemas/SHA256hash"
      - name: comment_id
        in: path
        description: The comment's ID.
        required: true
        schema:
          $ref: "#/components/schemas/SHA256hash"
    put:
      operationId: commentPhoto
      summary: Comment a photo.
      description: |-
        Lets the user comment one of `user_name`'s photos, authentication is required in order 
        to perform the comment, the user might post multiple comments, even identical ones
        (but that would be annoying!).
      security:
        - bearerAuth: []
      tags:
        - "photos"
      requestBody:
        description: The comment to be posted on the photo.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        "204":
          description: |-
            The comment has been posted.
        "400":
          description: |-
            The request is ill-formed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: |-
            Either the requested user or photo does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: uncommentPhoto
      summary: Delete a comment.
      tags:
        - "photos"
      description: |-
        Lets the owner of a photo delete one of the comments on it, the comment gets 
        completely erased from the post and even the commenter cannot see it anymore, 
        naturally, it requires proper authentication from the owner.
      security:
        - bearerAuth: []
      responses:
        "204":
          description: |-
            The comment has been deleted.
        "400":
          description: |-
            The request is ill-formed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: |-
            Either the requested user, photo or comment does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{user_name}/following:
    parameters:
      - name: user_name
        in: path
        description: The user's name
        required: true
        schema:
          $ref: "#/components/schemas/Username"
    get:
      operationId: getFollowing
      summary: Get the list of users a user is following
      description: |-
        Get the list of users a user is following
      tags:
        - "followers"
      responses:
        "200":
          description: |-
            The list of users the user is following
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FollowList"
        "404":
          description: |-
            The user does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: |-
            An internal error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: |-
            The request is ill-formed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{user_name}/following/{followed_name}:
    parameters:
      - name: user_name
        in: path
        description: The user's name
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: followed_name
        in: path
        description: The target's username
        required: true
        schema:
          $ref: "#/components/schemas/Username"
    put:
      operationId: followUser
      summary: Follow a user
      description: |-
        Follow a user
      tags:
        - "followers"
      requestBody:
        description: |-
          The user to follow
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Username"
      security:
        - bearerAuth: []
      responses:
        "204":
          description: |-
            The user has been followed
        "400":
          description: |-
            The follow request is ill-formed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: |-
            The user does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: |-
            The user is already following the target
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: unfollowUser
      summary: Unfollow a user
      description: |-
        Unfollow a user that the user has been following, requires 
        proper authentication from the user.
      tags:
        - "followers"
      security:
        - bearerAuth: []
      responses:
        "204":
          description: |-
            The user has been unfollowed.
        "400":
          description: |-
            The unfollow request is ill-formed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: |-
            The user identified by this name does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: |-
            The user is not being followed by the user specified in the body of the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{user_name}/stream:
    parameters:
      - name: user_name
        description: The name of the stream's owner.
        required: true
        in: path
        schema:
          $ref: "#/components/schemas/Username"
      - name: from
        description: The index of the first post to retrieve.
        required: false
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
      - name: offset
        description: The offset of the last post to retrieve starting from the base.
        required: false
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 255
          default: 10

    get:
      operationId: getMyStream
      summary: Gets the stream of a user
      description: |-
        Retrieves the stream of `user_name`, containing a list of the most recent
        posts of the user and his followers.

        The stream is the *heart* of WasaPhoto, it allows a user to see the experiences 
        that his friends are having.

        The stream is therefore something personal that is only accessible through 
        authentication.
      tags:
        - "stream"
        - "users"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |-
            The user's stream has been retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream"
        "404":
          description: |-
            The requested user does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{user_name}/followers:
    parameters:
      - name: user_name
        in: path
        description: The user's name
        required: true
        schema:
          $ref: "#/components/schemas/Username"
    get:
      operationId: getFollowers
      summary: Get the list of users following a user
      description: |-
        Get the list of users following a user
      tags:
        - "followers"

      responses:
        "200":
          description: |-
            The list of users following the user, the user's name is also 
            aggregated in the list for completeness.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FollowList"
        "404":
          description: |-
            The user does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: |-
            An internal error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: |-
            The request is ill-formed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{user_name}/bans/{banned_name}:
    parameters:
      - name: user_name
        in: path
        description: The user's name
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: banned_name
        in: path
        description: The banned user's name
        required: true
        schema:
          $ref: "#/components/schemas/Username"
    delete:
      operationId: unbanUser
      summary: Unban a user
      description: |-
        Unban a user
      tags:
        - "bans"
      security:
        - bearerAuth: []
      responses:
        "204":
          description: |-
            The user has been unbanned
        "400":
          description: |-
            The unban request is ill-formed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: |-
            The user does not exist

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID)

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: banUser
      summary: Ban a user
      description: |-
        Ban a user
      tags:
        - "bans"
      security:
        - bearerAuth: []
      responses:
        "204":
          description: |-
            The user has been banned
        "400":
          description: |-
            The ban request is ill-formed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: |-
            The user does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: |-
            The user is not correctly authenticated (the given ID does not match the user's ID)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{user_name}/bans:
    parameters:
      - name: user_name
        in: path
        description: The user's name
        required: true
        schema:
          $ref: "#/components/schemas/Username"
    get:
      operationId: getBans
      summary: Get the list of users banned by a user
      description: |-
        Get the list of all users banned by a user.
      tags:
        - "bans"
      responses:
        "200":
          description: |-
            The list of users banned by the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
        "404":
          description: |-
            The requested user does not exist.

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /resources/photos/{UUID}:
    parameters:
      - name: UUID
        in: path
        description: The photo's UUID
        required: true
        schema:
          $ref: "#/components/schemas/SHA256hash"
    get:
      operationId: getPhoto
      summary: Get a photo
      description: |-
        Get a photo
      tags:
        - "photos"
      responses:
        "200":
          description: |-
            The photo
          content:
            image/jpeg:
              schema:
                $ref: "#/components/schemas/Photo"
        "404":
          description: |-
            The photo does not exist

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /session:
    put:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.

        The usernames *must* be unique, but by tying user login and registration together,
        we are effectively removing the possibility of a duplicate username.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Username"
        required: true
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserID"
        "400":
          description: |-
            Login request is ill-formed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: |-
            Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
